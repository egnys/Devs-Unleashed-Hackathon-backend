# Generated by Django 4.1.4 on 2023-01-09 13:57

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('account_id', models.CharField(max_length=128, unique=True, verbose_name='accountId from Jira')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to='core.player')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('project_id', models.CharField(max_length=200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Taskogotchi',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.JSONField(blank=True, null=True, verbose_name='Image components stored as JSON')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('health', models.IntegerField(default=100)),
                ('strength', models.IntegerField(default=100)),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='taskogotchi', to='core.playerprofile')),
            ],
            options={
                'verbose_name': 'Taskogotchi',
                'verbose_name_plural': 'Taskogotchies',
            },
        ),
        migrations.AddField(
            model_name='playerprofile',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to='core.project'),
        ),
        migrations.CreateModel(
            name='FightChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initiator_health', models.IntegerField(default=100)),
                ('initiator_strength', models.IntegerField(default=100)),
                ('opponent_health', models.IntegerField(default=100)),
                ('opponent_strength', models.IntegerField(default=100)),
                ('status', models.CharField(choices=[('WA', 'Waiting for accept'), ('AC', 'Accepted'), ('P', 'Pending'), ('CO', 'Completed'), ('CA', 'Canceled')], default='WA', max_length=2)),
                ('draw', models.BooleanField(default=False)),
                ('initiator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='initiated_fights', to='core.playerprofile')),
                ('opponent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_fights', to='core.playerprofile')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='won_fights', to='core.playerprofile')),
            ],
            options={
                'verbose_name': 'Fight',
                'verbose_name_plural': 'Fights',
            },
        ),
        migrations.AlterUniqueTogether(
            name='playerprofile',
            unique_together={('player', 'project')},
        ),
        migrations.AddConstraint(
            model_name='fightchallenge',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('draw', True), models.Q(('winner__isnull', False), ('status', 'CO')), _connector='XOR'), models.Q(('draw', False), ('winner__isnull', True), models.Q(('status', 'CO'), _negated=True)), _connector='OR'), name='draw_and_winner__isnull_not_equal', violation_error_message='Draw and winner must be not set until fight is not completed. When completed, draw and winner must not be equal'),
        ),
    ]
